= DRY CRUD

Generates simple and extendable controller, views and helpers that support you to DRY up the CRUD code in your Rails project. Start with these elements and build a clean base to efficiently develop your application upon. First, you need to install the gem with

  gem install dry_crud

Then simply run the following generator in your Rails app to get the goodies:

  script/generate dry_crud

To integrate dry_crud into your code, only a few additions are required:

* To use a standard formatting, tables and forms throughout your application, add 'helper :standard' to your ApplicationController. 
* To get uniform CRUD functionallity, just subclass your controllers from CrudController. 
* Add a :label method to your models for a human-friendly representation.

== Overview

In most Rails applications, you have some models that require basic CRUD (create, read, update, delete) functionality. There are various possibilities like Rails scaffolding, {Active Scaffold}[http://activescaffold.com/] or {Dry Scalffold}[http://github.com/grimen/dry_scaffold]. Still, various parts in your application remain duplicated. While you might pull up common methods into a common superclass controller, most views still contain very similar code.

Enter DRY CRUD.

<b>
The main idea of DRY CRUD is to concentrate basic functionality of your application, like CRUD actions, uniform formatting, forms and tables into specifically extendable units. DRY CRUD generates various foundation classes that you may freely adapt to your application's needs. For each model, you may transparently customize arbitrary parts or just fallback to the general behaviour. This applies not only for controllers, but also for view templates and helpers.
</b>

A core element of DRY CRUD is the RenderInheritable module. This gives you inheritable views and partials. In the default case, a template is searched in the current controller's view folder. If it is not found there, the template with the same name in the view folder of the superclass controller is used. This lookup path might be customized as well.

DRY CRUD is a Rails generator. All code resides in your application and is open for you to inspect and to extend. You may pick whatever you consider useful or adapt what is not sufficient. Even if you do not require any CRUD functionality, you might find some helpers simplifying your work. There are no runtime dependencies to the dry_crud gem. Having said this, DRY CRUD does not want to provide a maximum of functionality that requires a lot of configuration, but rather a clean and lightweight foundation to build your application's requirements upon. This is why DRY CRUD comes as a generator and not as a Rails plugin.

DRY CRUD does not depend on any other plugins, but easily allows you to integrate them in order to unify the behaviour of your CRUD controllers. You might even use the plugins mentioned above to adapt your generated CrudController base class. All classes come with thorough tests that provide you with a solid foundation for implementing your own adaptions.

The gem was developped with Rails 2.3.8, we plan to reach a fully compatible version 1.0 when Rails 3 has come out.

See the Examples section for some use cases and the Generated Files section below for details on the single classes and templates.

== Examples

=== Controller with CRUD functionality

Say you want to manage a Person model. Create the following controller and add a :label method to your model for a human-friendly representation used in page titles.

<tt>app/controllers/people_controller.rb</tt>:
  class PeopleController < CrudController
  end

<tt>app/models/person.rb</tt>:
  class Person
    def label
      "#{lastname} #{firstname}"
    end
  end

That's it. You have an overview of all people, detail pages and forms to edit and create persons. Oh, and of course, you may delete persons as well. By default, all attributes are displayed and formatted according to their column type whereever they appear. This holds for the input fields as well.


==== Customize single views

Well, maybe there are certain attributes you do not want to display in the people list, or others that are not editable. No problem, simply create a <tt>list</tt> partial in <tt>app/views/people/_list.html.erb</tt> to customize this:

  <%= crud_table [:lastname, :firstname, :city, :sex] %>

This only displays these three attributes in the table. All other templates, as well as the main index view, fallback to the ones in <tt>app/views/crud</tt>.


==== Adapt general behaviour

Next, let's adapt a part of the general behaviour used in all CRUD controllers. As an example, we include pagination with will_paginate[http://wiki.github.com/mislav/will_paginate/] in all our overview tables: 

In <tt>app/controllers/crud_controller.rb</tt>, change the index action to

  def index
    @entries = model_class.paginate({:page => params[:page]}.merge(find_all_options)) 
    respond_with @entries   
  end

In <tt>app/views/crud/index.html.erb</tt>, add the following line for the pagination links:
   <%= will_paginate @entries %>

And we are done again. All our controllers inheriting from CrudController, including above PeopleController, now have paginated index views. Because our customization for the people table is in the seperate <tt>_list</tt> partial, no further modifications are required. 


==== Special formatting for selected attributes

Sometimes, the default formatting provided by :format_attr will not be sufficient. We have a boolean column <tt>sex</tt> in our model, but would like to display 'male' or 'female' for it (instead of 'no' or 'yes', which is a bit cryptic). Just define a method in your view helper starting with <tt>format_</tt>, followed by the attribute name:

In <tt>app/helpers/people.rb</tt>:
  def format_sex(person)
    person.sex ? 'female' : 'male'
  end

By the way: The method :f in StandardHelper uniformly formats arbitrary values according to their class.  


==== CRUD controller callbacks

As a last example, let's say we have added a custom input field that must specially processed. Instead of overwriting the entire update action, it is possible to register callbacks for the +create+, +update+, +save+ (= +create+ and +update+) and +destroy+ actions. They work very similarliy like the callbacks on ActiveRecord. For each action, before and after callbacks are run. Before callbacks may also prevent the action from being executed when returning false. Here is some code:

In <tt>app/controllers/people_controller.rb</tt>:
  after_save :upload_picture
  before_destroy :delete_picture
	
  def upload_picture
    store_file(params[:person][:picture]) if params[:person][:picture]
  end
  
  def delete_picture
    if !perform_delete_picture(@entry.picture)
      flash[:error] = 'Could not delete picture' 
      false
    end
  end


=== Standard Tables and Forms

DRY CRUD also provides two builder classes for update/create forms and tables for displaying entries of one model. They may be used allover your application to DRY up the form and table code. Normally, they are used with the corresponding methods from StandardHelper.

==== Tables

This is the code to define a table with some attribue columns for a list of same-type entries. Columns get a header corresponding to the attribute name:
  <%= table(@people) do |t|
        t.attrs :lastname, :firstname
      end %>

If entries is empty, a basic 'No entries available' message is rendered instead of the table.

To render custom columns, use the :col method:
  <%= table(@people) do |t|
        t.attrs :lastname, :firstname
        t.col('', :class => 'center') {|entry| image_tag(entry.picture) }
        t.attrs :street        
        t.col('Map') {|entry| link_to(entry.city, "http://maps.google.com/?q=#{entry.city}" }
      end %>

==== Forms

Forms work very similar. In the most simple case, you just have to specify which attributes of a model to create input fields for, and you get a complete form with error messages, labeled input fields according the column types and a save button:

  <% form(@person, [:firstname, :lastname, :age, :city] -%>

Of course, custom input fields may be defined as well:
  <% form(@person, [], :url => {:action => 'custom_update', :id => @person.id}) do |f| -%>
    <%= f.labeled_input_fields :firstname, :lastname %>
    <% f.labeled(:sex) do %>
      <%= f.radio_button :sex, true %> female
      <%= f.radio_button :sex, false %> male
    <% end -%>
    <%= f.labeled_integer_field :age %>
    <%= f.labeled_file_field :picture %>
  <% end -%>

== Generated Files

All generated files are supposed to provide a reasonable foundation for the CRUD functionality. You are encouraged to adapt them to fit the needs of your application. They're yours!

=== Controller:

{controller/crud_controller.rb}[http://codez.ch/dry_crud/?q=CrudController]:: Abstract controller providing basic CRUD actions in a RESTful way. This implementation mainly follows the one of the Rails scaffolding controller. Some enhancements were made to ease extendability. Several protected helper methods are there to be (optionally) overriden by subclasses.

=== Helpers:

{helpers/standard_helper.rb}[http://codez.ch/dry_crud/?q=StandardHelper]:: A view helper to standartize often used functions like formatting, tables, forms or action links. This helper is ideally defined in the ApplicationController. It is required to use the StandardTableBuilder and the StandardFormBuilder.

{helpers/crud_helper.rb}[http://codez.ch/dry_crud/?q=CrudHelper]:: A small helper for CrudController to render tables and forms with a default set of attributes.

=== Views:

views/crud/index.html.erb:: The index view displaying a table with all entries and an action link to add new ones.

views/crud/_list.html.erb:: A partial defining the table in the index view. To change the displayed attributes in your CRUD model, just create an own _list.html.erb in your models view directory.

views/crud/show.html.erb:: The show view displaying all the attributes of one entry and the various actions to perform on it.

views/crud/_attrs.html.erb:: A partial defining the attributes to be displayed in the show view. 

views/crud/new.html.erb:: The view to create a new entry.

views/crud/edit.html.erb:: The view to edit an existing entry.

views/crud/_form.html.erb:: The form used to create and edit entries. If you would like to customize this form for various models, just create an own _form.html.erb in your models view directory.

views/shared/_labeled.html.erb:: Partial to define the layout for an arbitrary content with a label.

views/layouts/crud.html.erb:: An example layout showing how to use the @title and +flash+. Most probably you want to include this in your application.html.erb or adapt this main crud templates, so you wont need this file.

public/stylesheets/crud.css:: A simple CSS with all the classes and ids used in the crud code. 

=== Lib:

{lib/standard_table_builder.rb}[http://codez.ch/dry_crud/?q=StandardTableBuilder]:: A simple helper to easily define tables listing several rows of the same data type.

{lib/standard_form_builder.rb}[http://codez.ch/dry_crud/?q=StandardFormBuilder]:: A form builder that automatically selects the corresponding input element for ActiveRecord columns. Input elements are rendered with a corresponding label by default.

{lib/render_inheritable.rb}[http://codez.ch/dry_crud/?q=RenderInheritable]:: Allows one to render inheritable views and partials. If no view file is found for the current controller, the corresponding file is looked up in its superclass hierarchy. Thus, only views or partials that look differently have to be overwritten.

{lib/crud_callbacks.rb}[http://codez.ch/dry_crud/?q=CrudCallbacks]:: Defines before and after callback hooks for create, update, save and destroy. When to execute the callbacks is in the responsibility of the clients of this module. This module is used in the CrudController to provide callbacks.

=== Tests:

test/crud_test_model.rb:: A dummy model to run CRUD tests against.

{test/functionals/crud_controller_test_helper.rb}[http://codez.ch/dry_crud/?q=CrudControllerTestHelper]:: A module to include into the functional tests for your CrudController subclasses. Contains a handfull of CRUD functionality tests for the provided implementation. So for each new crud controller, you get 20 tests for free.

test/several other tests:: Testing the provided implementation and a great base to test your adaptions of the CRUD code.



